name: CI with SonarQube

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Джоб для кеширования зависимостей
  cache:
    name: Cache dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

  # Джоб для обычной сборки и тестирования
  build_and_test:
    name: Build and Run Tests
    runs-on: ubuntu-latest
    needs: cache
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Build and test with Gradle
        run: | 
          ./gradlew clean build
          ./gradlew clean test
      - name: Assemble
        run: ./gradlew assemble

  # Джоб для запуска приложения в Docker и повторного тестирования
  dockerized_tests:
    name: Run Tests in Docker
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - uses: actions/checkout@v4

      # Устанавливаем Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Сборка проекта и запуск тестов
      - name: Build and run tests (assemble .jar and run tests)
        run: ./gradlew assemble  # Собираем и запускаем тесты

      # Стартуем сервисы в Docker
      - name: Build and start services in Docker
        run: docker-compose -f docker-compose-test.yml up --build -d

      # Ждем, пока контейнеры не будут готовы
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 20

      # Проверка логов контейнера
      - name: Check if container is running
        run: |
          docker ps -a
          docker logs my-app

      # Запуск тестов внутри Docker
      - name: Run tests inside Docker
        run: docker exec my-app /app/gradlew test

      # Остановка и удаление контейнеров
      - name: Stop and remove containers
        run: docker-compose -f docker-compose-test.yml down

  # Джоб для анализа SonarQube
  sonar_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: dockerized_tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Build and analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonarqube --info
#
#  # Джоб для сканирования безопасности
#  security_scan:
#    name: CodeQL Security Scan
#    runs-on: ubuntu-latest
#    needs: sonar_analysis
#    permissions:
#      security-events: write
#    env:
#      CODEQL_SOURCE_ROOT: src
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      # Сборка проекта перед анализом
#      - name: Build project
#        run: |
#          ./gradlew assemble
#          ./gradlew build
#
#      # Инициализация CodeQL (обновлено до v3)
#      - name: Initialize CodeQL
#        uses: github/codeql-action/init@v3
#        with:
#          languages: java
#          source-root: src
#
#      # Выполнение анализа CodeQL (обновлено до v3)
#      - name: Perform CodeQL Analysis
#        uses: github/codeql-action/analyze@v3

