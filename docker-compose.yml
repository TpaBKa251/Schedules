version: '3.9'
services:
  # Может не стартануть, если уже запущен в сервисе броней (Джаброни) - это нормально
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: schedule
      RABBITMQ_DEFAULT_PASS: schedule
      RABBITMQ_DEFAULT_VHOST: schedule-service
    ports:
      - "5672:5672"  # Порт для общения с микросервисами
      - "15672:15672" # Web UI для управления RabbitMQ
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
        - shared-network

  schedulesservice:
    container_name: schedulesservice
    build:
      dockerfile: Dockerfile-local
      context: .
      args:
        INTERNAL_REPO_LOGIN: ${INTERNAL_REPO_LOGIN}
        INTERNAL_REPO_PASSWORD: ${INTERNAL_REPO_PASSWORD}
    hostname: schedulesservice
    ports:
      - "8084:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://hostelDB:5432/hostelService
      - SPRING_DATASOURCE_USERNAME=hostel
      - SPRING_DATASOURCE_PASSWORD=ilia
      - RABBITMQ_HOST=rabbitmq  # Указываем имя RabbitMQ контейнера
      - RABBITMQ_PORT=5672  # Порт RabbitMQ
      - RABBITMQ_USERNAME=schedule
      - RABBITMQ_PASSWORD=schedule
      - RABBITMQ_VIRTUAL_HOST=schedule-service
      - INTERNAL_REPO_LOGIN=${INTERNAL_REPO_LOGIN}
      - INTERNAL_REPO_PASSWORD=${INTERNAL_REPO_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 10s
    networks:
      - shared-network

networks:
  shared-network:
    external: true
